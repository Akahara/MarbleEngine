#version 430 core

// {...} are replaced at runtime
#define WORK_SIZE {WORK_SIZE}
#define GROUP_COUNT {GROUP_COUNT}
#define N (WORK_SIZE*GROUP_COUNT)

layout(local_size_x = WORK_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer b_voted {
  int voted_instances[]; // length n
};
layout(std430, binding = 1) buffer b_runningSum {
  int running_sum[]; // length 2n
};
layout(std430, binding = 2) buffer b_totals {
  int totals[]; // length 2n/1024, in this shader it may as well be n/1024 = the group count
};

void main()
{
  int tid = int(gl_LocalInvocationID.x);
  int offset = int(gl_WorkGroupID.x * WORK_SIZE);

  int ino = 0;
  running_sum[ino * N + offset + tid] = tid == 0 ? 0 : voted_instances[offset + tid - 1];
  for (int o = 1; o < WORK_SIZE; o <<= 1) {
    memoryBarrierShared();
    barrier();
    if (tid - o >= 0)
      running_sum[(1 - ino) * N + offset + tid] = running_sum[ino * N + offset + tid] + running_sum[ino * N + offset + tid - o];
    else
      running_sum[(1 - ino) * N + offset + tid] = running_sum[ino * N + offset + tid];
    ino = 1 - ino;
  }

  memoryBarrierShared();barrier(); // unecessary, the thread is reading from values *it* just wrote
  running_sum[offset + tid] = running_sum[ino * N + offset + tid]; // unecessary? given the work size the filled half at the end is already the first one

  // save the total block size
  if (tid == WORK_SIZE - 1)
    totals[gl_WorkGroupID.x] = running_sum[offset + tid] + voted_instances[offset + WORK_SIZE-1];
}
