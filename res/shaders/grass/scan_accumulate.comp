#version 430 core

// a work group will accumulate over WORK_SIZE values
#define WORK_SIZE 1024
#define GROUP_COUNT 16

layout(local_size_x = WORK_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 1) buffer b_runningSum {
  int running_sum[]; // length 2n, in this shader it may as well be n
};
layout(std430, binding = 2) buffer b_totals {
  int totals[]; // length 2n/1024, in this shader it may as well be n/1024 = the group count
};
layout(std430, binding = 4) buffer b_indirectDrawCommand {
  uint count;
  uint instanceCount;
  uint firstIndex;
  int  baseVertex;
  uint baseInstance;
};

uniform uint N;

void main()
{
  // we already accumulated on each group and on the totals
  // the only remaining thing to do is to adjust each group
  // by the total of the groups before it
  
  if(gl_WorkGroupID.x == GROUP_COUNT-1) {
    // the last group does not need to be adjusted, instead we can store the total sum in the instanceCount member
    if(gl_LocalInvocationID.x == 0)
      instanceCount = totals[GROUP_COUNT-1];
  } else {
    running_sum[(gl_WorkGroupID.x+1)*gl_WorkGroupSize.x + gl_LocalInvocationID.x] += totals[gl_WorkGroupID.x];
  }
}