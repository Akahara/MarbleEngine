#version 430 core

#define WORK_SIZE 1024
#define GROUP_COUNT 16

layout(local_size_x = WORK_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) buffer b_runningSum {
  int running_sum[]; // length 2n, in this shader it may as well be n
};
layout(std430, binding = 1) buffer b_totals {
  int totals[]; // length 2n/1024, in this shader it may as well be n/1024 = the group count
};
layout(std430, binding = 2) buffer b_indirectDrawCommand {
  uint count;
  uint instanceCount;
  uint firstIndex;
  int  baseVertex;
  uint baseInstance;
};

void main()
{
  // we already accumulated on each group and on the totals
  // the only remaining thing to do is to adjust each group
  // by the total of the groups before it

  uint tid = gl_LocalInvocationID.x;
  uint gid = gl_WorkGroupID.x;
  
  if(gid == GROUP_COUNT-1) {
    // the last group does not need to be adjusted, instead we can store the total sum in the instanceCount member
    if(tid == 0)
      instanceCount = totals[GROUP_COUNT-1];
  } else {
    running_sum[(gid+1)*WORK_SIZE + tid] += totals[gid];
  }
}
