#version 430 core

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

struct instance_data // base alignment=8
{
  vec4 position;
  float colorPalette;

  float p1,p2,p3; // padding, not necessary here, do NOT use vec3
};

layout(std140, binding = 0) buffer i_instances {
  instance_data instances[];
};
layout(std430, binding = 1) buffer b_culled {
  int culled_instances[];
};
layout(std430, binding = 2) buffer b_runningSum {
  int running_sum[];
};
layout(std430, binding = 3) buffer o_instanceBuffer {
  instance_data drawn_instances[];
};

uniform uint u_bladesCount;

void main() {
  uint i = gl_LocalInvocationID.x + gl_WorkGroupID.x * gl_WorkGroupSize.x;
  if(i >= u_bladesCount || culled_instances[i] != 1)
    return;
  drawn_instances[running_sum[i]].position     = instances[i].position;
  drawn_instances[running_sum[i]].colorPalette = instances[i].colorPalette;
}