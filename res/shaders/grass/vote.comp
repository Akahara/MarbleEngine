#version 430 core

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

struct instance_data // base alignment=8
{
  vec4 position;
  float colorPalette;

  float p1,p2,p3; // padding, not necessary here, do NOT use vec3
};

uniform mat4 u_VP;

layout(std140, binding = 0) buffer i_instances {
  instance_data instances[];
};
layout(std430, binding = 1) buffer b_culled {
  int culled_instances[];
};

const float culling = 1. + .05;

uniform uint u_bladesCount;

void main()
{
  uint i = gl_LocalInvocationID.x + gl_WorkGroupID.x * gl_WorkGroupSize.x;
  if(i >= u_bladesCount)
    return;
  // if the "visible point" is outside of the view frustum, the whole instance is culled
  vec3 visiblePt = instances[i].position.xyz;
  visiblePt.y += instances[i].position.w * .5;
  vec4 proj = u_VP * vec4(visiblePt, 1);
  proj /= abs(proj.z);
  proj.xy = abs(proj.xy);
  culled_instances[i] = (proj.x < culling && proj.y < culling && proj.z > 0) ? 1 : 0; // could use zNear and zFar, good enough for now
}
