#version 460 core

layout (local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

// ----------------------------------------------------------------------------
//
// uniforms
//
// ----------------------------------------------------------------------------

layout(rgba32f, binding = 0) uniform image2D imgOutput;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gDepth;
uniform sampler2D texNoise;

uniform vec3 samples[64];

uniform int kernelSize = 64;
uniform float radius = 0.5;
uniform float bias = -0.0005;

const vec2 noiseScale = vec2(16*64.0/4.0, 9*64.F/4.0); 

int SCR_WIDTH = 16*64;
int SCR_HEIGHT = 9*64;

uniform mat4 projection;

// ----------------------------------------------------------------------------
//
// functions
//
// ----------------------------------------------------------------------------



void main() {
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);


    float x = float(texelCoord.x)/(gl_NumWorkGroups.x * 8);
    float y = float(texelCoord.y)/(gl_NumWorkGroups.y * 4);
	    
    vec2 TexCoords = vec2(x,y);

    vec3 fragPos = texture(gPosition, TexCoords).xyz;
    vec3 normal = normalize(texture(gNormal, TexCoords).rgb);
    vec3 randomVec = normalize(texture(texNoise, TexCoords * noiseScale).xyz);
    // create TBN change-of-basis matrix: from tangent-space to view-space
    vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
    vec3 bitangent = cross(normal, tangent);
    mat3 TBN = mat3(tangent, bitangent, normal);
    // iterate over the sample kernel and calculate occlusion factor
    float occlusion = 0.0;
    for(int i = 0; i < kernelSize; ++i)
    {
        // get sample position
        vec3 samplePos = TBN * samples[i]; // from tangent to view-space
        samplePos = fragPos + samplePos * radius; 
        
        // project sample position (to sample texture) (to get position on screen/texture)
        vec4 offset = vec4(samplePos, 1.0);
        offset = projection * offset; // from view to clip-space
        offset.xyz /= offset.w; // perspective divide
        offset.xyz = offset.xyz * 0.5 + 0.5; // transform to range 0.0 - 1.0
        
        // get sample depth
        //float sampleDepth = texture(gPosition, offset.xy).z; // get depth value of kernel sample
        float sampleDepth = texture(gDepth, offset.xy).r; // get depth value of kernel sample
        float pixelDepth = texture(gDepth, TexCoords).r;
        
        // range check & accumulate
        float rangeCheck = smoothstep(0.0, 1.0, radius / abs(pixelDepth - sampleDepth));
        occlusion += (sampleDepth <= pixelDepth + bias ? 1.0 : 0.0) * rangeCheck;           
    }
    occlusion = 1.0 - (occlusion / kernelSize);

	vec4 result = vec4(occlusion);

    imageStore(imgOutput, texelCoord, result);
}
