#version 460 core

layout (local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

// ----------------------------------------------------------------------------
//
// uniforms
//
// ----------------------------------------------------------------------------

layout(rgba32f, binding = 0) uniform image2D imgOutput;

uniform sampler2D u_texture;

uniform int u_firstPass = 0;

uniform vec2 u_srcResolution = vec2(16*64,9*64);

// ----------------------------------------------------------------------------
//
// functions
//
// ----------------------------------------------------------------------------

//layout (location = 0) out vec3 upsample;


void main()
{


    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    float u = float(texelCoord.x)/(gl_NumWorkGroups.x * 8);
    float v = float(texelCoord.y)/(gl_NumWorkGroups.y * 4);
	    
    vec2 o_uv = vec2(u,v);
    
    vec2 srcTexelSize = 1.0 / u_srcResolution;
    float x = srcTexelSize.x;
    float y = srcTexelSize.y;

    // Take 13 samples around current texel:
    // a - b - c
    // - j - k -
    // d - e - f
    // - l - m -
    // g - h - i
    // === ('e' is the current texel) ===
    vec3 a = texture(u_texture, vec2(o_uv.x - 2*x, o_uv.y + 2*y)).rgb;
    vec3 b = texture(u_texture, vec2(o_uv.x,       o_uv.y + 2*y)).rgb;
    vec3 c = texture(u_texture, vec2(o_uv.x + 2*x, o_uv.y + 2*y)).rgb;

    vec3 d = texture(u_texture, vec2(o_uv.x - 2*x, o_uv.y)).rgb;
    vec3 e = texture(u_texture, vec2(o_uv.x,       o_uv.y)).rgb;
    vec3 f = texture(u_texture, vec2(o_uv.x + 2*x, o_uv.y)).rgb;
    
    vec3 g = texture(u_texture, vec2(o_uv.x - 2*x, o_uv.y - 2*y)).rgb;
    vec3 h = texture(u_texture, vec2(o_uv.x,       o_uv.y - 2*y)).rgb;
    vec3 i = texture(u_texture, vec2(o_uv.x + 2*x, o_uv.y - 2*y)).rgb;
    
    vec3 j = texture(u_texture, vec2(o_uv.x - x, o_uv.y + y)).rgb;
    vec3 k = texture(u_texture, vec2(o_uv.x + x, o_uv.y + y)).rgb;
    vec3 l = texture(u_texture, vec2(o_uv.x - x, o_uv.y - y)).rgb;
    vec3 m = texture(u_texture, vec2(o_uv.x + x, o_uv.y - y)).rgb;

    // Apply weighted distribution:
    // 0.5 + 0.125 + 0.125 + 0.125 + 0.125 = 1
    // a,b,d,e * 0.125
    // b,c,e,f * 0.125
    // d,e,g,h * 0.125
    // e,f,h,i * 0.125
    // j,k,l,m * 0.5
    // This shows 5 square areas that are being sampled. But some of them overlap,
    // so to have an energy preserving downsample we need to make some adjustments.
    // The weights are the distributed, so that the sum of j,k,l,m (e.g.)
    // contribute 0.5 to the final color output. The code below is written
    // to effectively yield this sum. We get:
    // 0.125*5 + 0.03125*4 + 0.0625*4 = 1
    vec4 downsample = vec4(0);
    downsample.rgb = e*0.125;
    downsample.rgb += (a+c+g+i)*0.03125;
    downsample.rgb += (b+d+f+h)*0.0625;
    downsample.rgb += (j+k+l+m)*0.125;

    if (u_firstPass == 1) {
        downsample.rgb = max(vec3(0), downsample.rgb-1);
    } 

    downsample.a = 1;

    imageStore(imgOutput, texelCoord, downsample);
}